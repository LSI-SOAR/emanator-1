#! /usr/bin/env node

const fs = require('fs-extra');
const os = require('os');
const vm = require('vm');
const events = require('events');
const path = require('path');
const colors = require('colors');
const mkdirp = require('mkdirp');
const { exec, execSync, execFile, spawn } = require('child_process');
const _module_ = require('module');

const Utils = require('./lib/utils');
const Git = require('./lib/tools/git');


const pkg = require('./package');
const Emanator = require('.');
class Emanate extends events.EventEmitter {
	constructor() {
		super();
		this.utils = new Utils(this);
		this.flags = this.utils.args();
        dpc(()=>{ this.main(); })
	}

	async main() {

		if(this.flags.v || this.flags.version) {
			console.log(`${pkg.version}`);
			return;
		}

		const gitResolver = Git.Resolver(this);
		const git = await gitResolver('N/A');

		const args = process.argv.slice(2).join(' ');
		let { base, organization, project } = this.utils.match(args,/(?<base>(git@|\w+@|https:\/\/)[\w-]+\.\w+[:\/])(?<organization>[\w]+)\/(?<project>[\w]+)(\.git)?/);
		if(base && organization && project) {

			const RELEASE = path.join(os.homedir(),'emanator');
			const PROJECT = path.join(RELEASE,organization,project+'/');
			const REPO = path.join(PROJECT,'repo');
			mkdirp.sync(PROJECT);

			let url = `${base}${organization}/${project}`;
			if(this.flags['--no-ssh'] || this.flags['--http'] || this.flags['--https']) {
				let { base, address, organization, project } = this.utils.match(url,/(?<base>(git@|\w+@|https:\/\/)(?<address>[\w-]+\.\w+)[:\/])(?<organization>[\w]+)\/(?<project>[\w]+)(\.git)?/);
				if(base && address && organization && project) {
					url = `https://${address}/${organization}/${project}`;
				}
			}
			await git.clone(url, PROJECT, 'repo');

	        let filename = path.join(REPO,'emanate');
			if(!fs.existsSync(filename)) {
				console.log(`Unable to locate emanate file:`.red.bold,`${filename}`.bold);
				process.exit(1);
			}

	        require.main.paths.unshift(path.join(REPO,'node_modules'));
			this.emanate(filename);
		}
		else {
	        let filename = path.join(process.cwd(),'emanate');
	        if(!fs.existsSync(filename)) {
	        	console.log("Error: no 'emanate' file found in the current folder.");
	        	return;
	        }
	        this.emanate(filename);
		}
	}

	async emanate(filename) {

        require.main.paths.unshift(path.join(process.cwd(),'node_modules'));

		try {
	    	let text = fs.readFileSync(filename).toString();
	    	
			text = `(async ()=>{ (${__extend_prototypes.toString()})();\n${text}\n})();`;
			// console.log(text);
			const sandbox = vm.createContext({
				exec, execSync, execFile, spawn,
				process,
				console,
				Emanator,
				fs,
				os,
				path,
				mkdirp,
				colors,
				setInterval,clearInterval,
				setTimeout,clearTimeout,
			},{ name : 'Emanator VM'});
			require('vm').runInContext(_module_.wrap(text),sandbox,{filename})({ }, require, module, filename, path.dirname(filename))
	    } catch(ex) {
	    	console.log(ex.toString().red);
	    	console.log(ex.stack);
	    }
	}
}

function __extend_prototypes() {


	if(!String.prototype.color) {
		Object.defineProperty(String.prototype, 'color', {
			value: function(c){
				return `\x1b[38;5;${c}m${this}\x1b[0m`;
			},
			writable:false,
			enumerable:false
		});
	}

	if(!Number.prototype.toFileSize) {
		Object.defineProperty(Number.prototype, 'toFileSize', {
			value: function(a, asNumber) {
				var b,c,d;
				var r = (
					a=a?[1e3,'k','B']:[1024,'K','iB'],
					b=Math,
					c=b.log,
					d=c(this)/c(a[0])|0,this/b.pow(a[0],d)
				).toFixed(2)
	
				if(!asNumber) {
					r += ' '+(d?(a[1]+'MGTPEZY')[--d]+a[2]:'Bytes');
				}
				return r;
			},
			writable:false,
			enumerable:false
		});
	}

	var addProperty = function(color, func) {
		String.prototype.__defineGetter__(color, func);
	};

	addProperty('strip', function() { return colors.strip(this); });
	addProperty('stripColors', function() { return colors.strip(this); });
	
	var x = Object.keys(colors.styles);
	x.forEach(function(style) {
		addProperty(style, function() {
		return colors.stylize(this, style);
		});
	});
	
	function applyTheme(theme) {
		var stringPrototypeBlacklist = [
		'__defineGetter__', '__defineSetter__', '__lookupGetter__',
		'__lookupSetter__', 'charAt', 'constructor', 'hasOwnProperty',
		'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString',
		'valueOf', 'charCodeAt', 'indexOf', 'lastIndexOf', 'length',
		'localeCompare', 'match', 'repeat', 'replace', 'search', 'slice',
		'split', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase',
		'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight',
		];
	
		Object.keys(theme).forEach(function(prop) {
			if (stringPrototypeBlacklist.indexOf(prop) !== -1) {
				console.log('warn: '.red + ('String.prototype' + prop).magenta +
				' is probably something you don\'t want to override.  ' +
				'Ignoring style name');
			} else {
				if (typeof(theme[prop]) === 'string') {
					colors[prop] = colors[theme[prop]];
					addProperty(prop, function() {
						return colors[prop](this);
					});
				} else {
					var themePropApplicator = function(str) {
						var ret = str || this;
						for (var t = 0; t < theme[prop].length; t++) {
						ret = colors[theme[prop][t]](ret);
						}
						return ret;
					};
					addProperty(prop, themePropApplicator);
					colors[prop] = function(str) {
						return themePropApplicator(str);
					};
				}
			}
		});
	}
	
	colors.setTheme = function(theme) {
		if (typeof theme === 'string') {
		console.log('colors.setTheme now only accepts an object, not a string. ' +
			'If you are trying to set a theme from a file, it is now your (the ' +
			'caller\'s) responsibility to require the file.  The old syntax ' +
			'looked like colors.setTheme(__dirname + ' +
			'\'/../themes/generic-logging.js\'); The new syntax looks like '+
			'colors.setTheme(require(__dirname + ' +
			'\'/../themes/generic-logging.js\'));');
		return;
		} else {
		applyTheme(theme);
		}
	};
	  
}

if(!global.Emanate) {
	new Emanate();
}